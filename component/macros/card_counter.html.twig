{# --------------------------------------------
  Counter Title Macro - 508 Accessible Version
  Description: Renders an animated counter with
  optional text before and after. Includes ARIA
  features for screen readers.
  Usage:
    {% import '@cua_theme/component/macros/card_counter.html.twig' as counterMacros %}
    {{ counterMacros.render_counter(number, text_alignment, text_color, before_number, after_number) }}
-------------------------------------------- #}

{% macro render_counter(number, text_alignment, text_color, before_number, after_number) %}
    {% if number %}

        {# Define default classes based on inputs; filter out any null/empty values #}
        {% set container_classes = [
            text_alignment ?: 'left',
            text_color ?: '',
        ] | filter(v => v) %}

        <div class="counter-size {{ container_classes|join(' ')|trim }}">

            {# Optional text before the number, e.g. '$' or '#' #}
            {% if before_number %}
                {% set before_classes = [
                    'padding-right',
                    text_color ?: '',
                ] | filter(v => v) %}
                <span class="{{ before_classes|join(' ')|trim }}">
                    {{ before_number|e }}
                </span>
            {% endif %}

            {# Animated counter span.
               - aria-live="polite" allows screen readers to announce updates non-disruptively.
               - role="status" designates this as a live region.
               - aria-hidden="true" prevents the "0" (animated placeholder) from being read.
               - data-count is used by JavaScript to animate the count-up.
            #}
            <span class="counter-up {{ text_color ?: '' }}"
                  aria-live="polite"
                  role="status"
                  aria-hidden="true"
                  data-count="{{ number }}">
                0
            </span>

            {# Screen reader-only announcement fallback.
               - Hidden visually but will be read aloud to users relying on assistive tech.
               - Includes semantic context: "Counter: X"
            #}
            <span class="visually-hidden" data-counter-announcer>
                {{ 'Counter: @number'|t({'@number': number}) }}
            </span>

            {# Optional text after the number, e.g. '%' or 'people' #}
            {% if after_number %}
                {% set after_classes = [
                    'padding-left',
                    text_color ?: '',
                ] | filter(v => v) %}
                <span class="{{ after_classes|join(' ')|trim }}">
                    {{ after_number|e }}
                </span>
            {% endif %}

        </div>

    {% endif %}
{% endmacro %}