<?php

use Drupal\block_content\Entity\BlockContent;
use Drupal\block_content\Entity\BlockContentType;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\SortArray;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * @file
 *
 * Place your custom PHP code in this file.
 */

function cu_theme_preprocess_page(&$variables)
{
  $variables['cas_login'] = theme_get_setting('cas_login');
  $variables['super_footer'] = theme_get_setting('super_footer');
  $variables['footer_01_size'] = (!theme_get_setting('footer_01_size') || theme_get_setting('footer_01_size') == 0) ? 3 : theme_get_setting('footer_01_size');
  $variables['footer_02_size'] = (!theme_get_setting('footer_02_size') || theme_get_setting('footer_02_size') == 0) ? 3 : theme_get_setting('footer_02_size');
  $variables['footer_03_size'] = (!theme_get_setting('footer_03_size') || theme_get_setting('footer_03_size') == 0) ? 3 : theme_get_setting('footer_03_size');
  $variables['footer_04_size'] = (!theme_get_setting('footer_04_size') || theme_get_setting('footer_04_size') == 0) ? 3 : theme_get_setting('footer_04_size');
}

/**
 * Implementation of hook_form_alter().
 *
 *
 */
function cu_theme_suggestions_form_alter(array &$suggestions, array $variables)
{
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implementation of hook_local_tasks().
 *
 *
 */
function cu_theme_preprocess_menu_local_task(&$variables)
{
  $variables['link']['#options']['attributes']['class'][] = 'btn btn-primary';
}

/**
 * Implements hook_preprocess_html().
 *
 * Allow CSS/Footer Customization and add path alias to body class.
 */
function cu_theme_preprocess_html(&$variables) {
  $variables['attributes']['class'][] = theme_get_setting('hide-breadcrumb');
  /* Add body class to nodes */
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = 'path-' . Html::cleanCssIdentifier($path_alias);

  $node = \Drupal::request()->attributes->get('node');
  if ($node instanceof Node) {
    $variables['attributes']['class'][] = 'page-node-' . $node->id();
  }

  if (theme_get_setting('customize_css')) {
    $custom_style = preg_replace('!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', theme_get_setting('customize_css'));
    $custom_style = str_replace(array("\r\n", "\r", "\n", "\t", '  ', '   ', '    '), '', $custom_style);
    $variables['customize_css'] = $custom_style;
  }

  $account = \Drupal::currentUser();
  $roles = $account->getRoles();
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function cu_theme_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 *
 * @param $definitions
 * @param array $extra
 */
function cu_theme_plugin_filter_block__layout_builder_alter(&$definitions, array $extra)
{
  # Load in all Custom Block Types.
  $block_types = BlockContentType::loadMultiple();
  $block_prefix = "inline_block";

  # Sort alphabetically by label?
  uasort($block_types, function ($a, $b) {
    return SortArray::sortByKeyString($a, $b, 'label');
  });

  # 'Add CU Blocks'
  foreach ($block_types as $block_type => $block) {
    # Append prefix.
    $definition = &$definitions["$block_prefix:$block_type"];

    # Add 'Add GT Blocks'
    $definition['category'] = t('Add CU Blocks');
    # And sync block->label with definition.
    $definition['admin_label'] = $block->label();
  }
}
